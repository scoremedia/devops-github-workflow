name: Verify Vault Secrets

on:
  workflow_call:
    inputs:
      vault_token:
        required: true
        type: string
      service:
        required: true
        type: string
      edges:
        required: true
        type: string
      runtime_file_path:
        required: false
        type: string
        default: "config/runtime.exs"
      environments:
        required: false
        type: string
        default: "staging,demo,uat,audit1,ps,production"

jobs:
  verify-vault-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Extract referenced environment variables
        run: |
          # Use grep to find lines containing "System.fetch_env!("...")
          # Use sed to extract the environment variable name inside the parentheses
          grep -o 'System.fetch_env!("[A-Z_]\+")' runtime.exs | sed 's/System.fetch_env!("\(.*\)")/\1/' > env_vars.txt
      - name: Verify each edge per environment
        run: |
          IFS=","
          FAILURE_FLAG=false
          VAULT_ADDR=""

          for environment in "${{ inputs.environments }}"; do
            echo "Processing environment: $environment"

            if [ $environment == "production" ]; then
              VAULT_ADDR="https://vault.prod.thescore.is"
            else
              VAULT_ADDR="https://vault.non-prod.thescore.is"
            fi

            for edge in "${{ inputs.edges }}"; do
              # Make the curl request using the environment- and edge-specific URL
              response=$(curl \
                --header "X-Vault-Token: ${{ inputs.vault_token }}" \
                --request GET \
                --url "${VAULT_ADDR}/v1/scorebet/subkeys/${{ inputs.service }}/${environment}/${edge}")
              
              if [ $? -ne 0 ]; then
                echo "Failed to retrieve secrets from ${VAULT_ADDR}/v1/scorebet/subkeys/${{ inputs.service }}/${environment}/${edge}"
                FAILURE_FLAG=true
              else
                # Check if any env var is missing in the response
                while IFS= read -r env_var; do
                  if ! echo "$response" | grep -q "$env_var"; then
                    echo "Secret $env_var not found at ${VAULT_ADDR}/v1/scorebet/subkeys/${{ inputs.service }}/${environment}/${edge}"
                    FAILURE_FLAG=true
                  fi
                done < env_vars.txt
              fi
            done
          done
