name: Pluto Workflow

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      template_dir:
        required: false
        type: string
        default: ""
        description: "(For Kustomize deployment method) a path to a directory containing 'kustomization.yaml'"
      values_base:
        required: false
        type: string
        default: ""
        description: "(For Helm chart deployment method) Specify a path of base values.yaml (or equivalent)"
      values_overlay:
        required: false
        type: string
        default: ""
        description: "(For Helm chart deployment method) Specify a path of overlay values.yaml (or equivalent)"
      chart_name:
        required: false
        type: string
        default: ""
        description: "(For Helm chart deployment method) Use this to manually set chart name. For example, corebook is using edgebook chart."

jobs:
  review-k8s-api:
    runs-on: non-prod-scorebet-org-runner
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Check out repository code (Casino)
        if: ${{ inputs.service_name  == 'casino' }}
        run:
          git fetch && git checkout origin/non-prod -- values
      - name: Download Pluto
        shell: bash
        run: |
          image=us-docker.pkg.dev/fairwinds-ops/oss/pluto:v5

          docker pull "$image"
          docker cp "$(docker create --rm "$image"):/pluto" /tmp/pluto
          sudo mv /tmp/pluto /usr/local/bin/pluto
      - name: Install all-in-one Kubernetes tools in a package.
        uses: yokawasa/action-setup-kube-tools@v0.9.3
        with:
          kubectl: '1.26.13'
      - name: Auth with jfrog for deps
        uses: scorebet/jfrog-auth-action@0.0.10
        with:
          artifact-type: "helm"

      - uses: scorebet/gcp-auth-action@main
      
      - name: Run Pluto to scan K8S Manifest and send a report to OpsLevel
        shell: bash
        env:
          UNENCRYPTED_TARGET_VERSION: ${{ secrets.TARGET_K8S_VERSION }}
          UNENCRYPTED_OPSLEVEL_PLUTO_INTEGRATION_WEBHOOK_URL: ${{ secrets.OPSLEVEL_PLUTO_INTEGRATION_WEBHOOK_URL }}
        run: |
          MANIFEST_FILE=manifest.yaml

          # Generate a manifest file
          ## Kustomize
          if [[ -n "${{ inputs.template_dir }}" ]]; then
            kubectl kustomize "${{ inputs.template_dir }}" --output="$MANIFEST_FILE"

          ## Helm
          else
            # if an user wishes to customize a Helm chart to use
            CHART_NAME=$([ -n "${{ inputs.chart_name }}" ] && echo "${{ inputs.chart_name }}" || echo "${{ inputs.service_name }}")

            helm dependency build "charts/$CHART_NAME"
            helm template "charts/$CHART_NAME" --values "${{ inputs.values_base }}" --values "${{ inputs.values_overlay }}" > "$MANIFEST_FILE"
          fi

          pluto detect - --target-versions "k8s=$UNENCRYPTED_TARGET_VERSION" --ignore-deprecations --ignore-removals --output json < "$MANIFEST_FILE" | curl -i -s -X POST "$UNENCRYPTED_OPSLEVEL_PLUTO_INTEGRATION_WEBHOOK_URL?alias=${{ inputs.service_name }}" -H 'content-type: application/json' --data-binary @-
